import React, { useState, useEffect } from 'react';
import { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';
import Modal from './UploadModal/Modal';
import { doc, onSnapshot, updateDoc } from 'firebase/firestore';
import { ref, deleteObject } from 'firebase/storage';
import { firestore, storage } from '../../utils/firebase';

const Recruit: React.FC = () => {
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [articleRs, setArticleRs] = useState<any[]>([]);
    const storeRef = doc(firestore, 'gallery', 'Î†àÌçºÎü∞Ïä§ Í≥µÏú†');

    const openModal = () => {
        setIsModalOpen(true);
    };

    const closeModal = () => {
        setIsModalOpen(false);
    };
    const handleDragEnd = async (result: any) => {
        if (result.destination && result.destination.droppableId === 'trashCan') {
            const itemToDelete = articleRs[result.source.index];

            // FirestoreÏóêÏÑú Ìï¥Îãπ ÏöîÏÜå ÏÇ≠Ï†ú
            const updatedArticleRs = [...articleRs];
            updatedArticleRs.splice(result.source.index, 1);
            await updateDoc(storeRef, {
                'Ï∑®ÏóÖ.articleR': updatedArticleRs,
            });

            // StorageÏóêÏÑú Ïù¥ÎØ∏ÏßÄ ÌååÏùº ÏÇ≠Ï†ú
            const imageRef = ref(storage, `thumbnailR/${itemToDelete.index}`);
            await deleteObject(imageRef);

            // ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
            setArticleRs(updatedArticleRs);
            return;
        }

        // Í∏∞Ï°¥ ÎìúÎûòÍ∑∏ Ïï§ ÎìúÎ°≠ Î°úÏßÅ (Ìï≠Î™©Ïùò ÏàúÏÑú Î≥ÄÍ≤Ω)
        if (result.destination) {
            const newArticleRs = [...articleRs];
            const [reorderedItem] = newArticleRs.splice(result.source.index, 1);
            newArticleRs.splice(result.destination.index, 0, reorderedItem);

            await updateDoc(storeRef, {
                'Ï∑®ÏóÖ.articleR': newArticleRs,
            });
        }
    };
    useEffect(() => {
        const unsubscribe = onSnapshot(storeRef, (docSnapshot) => {
            if (docSnapshot.exists()) {
                const data = docSnapshot.data();
                const articleRData = data?.Ï∑®ÏóÖ?.articleR || [];
                setArticleRs(articleRData);
            } else {
                console.log('Document does not exist.');
            }
        });

        return () => {
            unsubscribe();
        };
    }, []);

    return (
        <>
            <div>
                <button onClick={openModal}>ÏóÖÎ°úÎìú</button>
                {isModalOpen && <Modal onClose={closeModal} />}
            </div>
            <DragDropContext onDragEnd={handleDragEnd}>
                <Droppable droppableId="trashCan">
                    {(provided) => (
                        <div ref={provided.innerRef} {...provided.droppableProps} className="trash-can">
                            üóëÔ∏è
                            {provided.placeholder}
                        </div>
                    )}
                </Droppable>
                <Droppable droppableId="yourDroppableId">
                    {(
                        provided,
                        // ÌïòÎÇòÏùò ÏûêÏãù Ìï®ÏàòÎ°ú Î≥ÄÍ≤Ω
                    ) => (
                        <div ref={provided.innerRef} {...provided.droppableProps}>
                            {articleRs.map((articleR, index) => (
                                <Draggable
                                    key={articleR.index.toString()}
                                    draggableId={articleR.index.toString()}
                                    index={index}
                                >
                                    {(provided) => (
                                        <div
                                            ref={provided.innerRef}
                                            {...provided.draggableProps}
                                            {...provided.dragHandleProps}
                                        >
                                            {/* ÏöîÏÜå ÎÇ¥Ïö© */}
                                            <a
                                                href={articleR.recruitURL}
                                                key={articleR.index}
                                                id={articleR.index}
                                                target="_blank"
                                                rel="noopener noreferrer"
                                            >
                                                <img src={articleR.thumbnailURL} alt={`article ${articleR.index}`} />
                                            </a>
                                        </div>
                                    )}
                                </Draggable>
                            ))}
                            {provided.placeholder}
                        </div>
                    )}
                </Droppable>
            </DragDropContext>
        </>
    );
};

export default Recruit;
